/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 260 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"

#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 275 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 30 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 38 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 38 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 70 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 105 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 328 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 36 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 146 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 87 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 90 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 247 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 235 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 27 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 102 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 38 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 105 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 149 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 108 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 111 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 117 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 120 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 123 "/home/pi/PyQt5_gpl-5.10.1/QtCore/sipQtCoreQAbstractTableModel.cpp"


class sipQAbstractTableModel : public  ::QAbstractTableModel
{
public:
    sipQAbstractTableModel( ::QObject*);
    virtual ~sipQAbstractTableModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QModelIndex index(int,int,const  ::QModelIndex&) const;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const;
    int rowCount(const  ::QModelIndex&) const;
    int columnCount(const  ::QModelIndex&) const;
     ::QVariant data(const  ::QModelIndex&,int) const;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int);
     ::QVariant headerData(int, ::Qt::Orientation,int) const;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int);
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&);
     ::QStringList mimeTypes() const;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);
     ::Qt::DropActions supportedDropActions() const;
    bool insertRows(int,int,const  ::QModelIndex&);
    bool insertColumns(int,int,const  ::QModelIndex&);
    bool removeRows(int,int,const  ::QModelIndex&);
    bool removeColumns(int,int,const  ::QModelIndex&);
    void fetchMore(const  ::QModelIndex&);
    bool canFetchMore(const  ::QModelIndex&) const;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const;
    void sort(int, ::Qt::SortOrder);
     ::QModelIndex buddy(const  ::QModelIndex&) const;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const;
     ::QSize span(const  ::QModelIndex&) const;
    bool submit();
    void revert();
     ::Qt::DropActions supportedDragActions() const;
    QHash<int, ::QByteArray> roleNames() const;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTableModel(const sipQAbstractTableModel &);
    sipQAbstractTableModel &operator = (const sipQAbstractTableModel &);

    char sipPyMethods[39];
};

sipQAbstractTableModel::sipQAbstractTableModel( ::QObject*a0):  ::QAbstractTableModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTableModel::~sipQAbstractTableModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractTableModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractTableModel);

    return  ::QAbstractTableModel::metaObject();
}

int sipQAbstractTableModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractTableModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractTableModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractTableModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractTableModel, _clname, &sipCpp) ? sipCpp :  ::QAbstractTableModel::qt_metacast(_clname));
}

void sipQAbstractTableModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractTableModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractTableModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractTableModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractTableModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractTableModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractTableModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractTableModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QAbstractTableModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractTableModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return  ::QAbstractTableModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQAbstractTableModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_sibling);

    if (!sipMeth)
        return  ::QAbstractTableModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQAbstractTableModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QAbstractTableModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractTableModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QAbstractTableModel,sipName_columnCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQAbstractTableModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QAbstractTableModel,sipName_data);

    if (!sipMeth)
        return  ::QVariant();

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractTableModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return  ::QAbstractTableModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQAbstractTableModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return  ::QAbstractTableModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QAbstractTableModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMap<int, ::QVariant> sipQAbstractTableModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return  ::QAbstractTableModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return  ::QAbstractTableModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQAbstractTableModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QAbstractTableModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QMimeData* sipQAbstractTableModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return  ::QAbstractTableModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QAbstractTableModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::Qt::DropActions sipQAbstractTableModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QAbstractTableModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractTableModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return  ::QAbstractTableModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return  ::QAbstractTableModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return  ::QAbstractTableModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return  ::QAbstractTableModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractTableModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QAbstractTableModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QAbstractTableModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::Qt::ItemFlags sipQAbstractTableModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return  ::QAbstractTableModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
         ::QAbstractTableModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQAbstractTableModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return  ::QAbstractTableModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQAbstractTableModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return  ::QAbstractTableModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSize sipQAbstractTableModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return  ::QAbstractTableModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return  ::QAbstractTableModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractTableModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
         ::QAbstractTableModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQAbstractTableModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QAbstractTableModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QHash<int, ::QByteArray> sipQAbstractTableModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_roleNames);

    if (!sipMeth)
        return  ::QAbstractTableModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractTableModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QAbstractTableModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractTableModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_moveRows);

    if (!sipMeth)
        return  ::QAbstractTableModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractTableModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_moveColumns);

    if (!sipMeth)
        return  ::QAbstractTableModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QAbstractTableModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractTableModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QAbstractTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_index, doc_QAbstractTableModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTableModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractTableModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_dropMimeData, doc_QAbstractTableModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTableModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QAbstractTableModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_flags, doc_QAbstractTableModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTableModel_parent, "parent(self) -> QObject");

extern "C" {static PyObject *meth_QAbstractTableModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTableModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_parent, doc_QAbstractTableModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTableModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractTableModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_sibling, doc_QAbstractTableModel_sibling);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractTableModel_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_hasChildren(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QAbstractTableModel, sipName_hasChildren, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractTableModel(void *, const sipTypeDef *);}
static void *cast_QAbstractTableModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractTableModel *sipCpp = reinterpret_cast< ::QAbstractTableModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTableModel(void *, int);}
static void release_QAbstractTableModel(void *sipCppV, int)
{
     ::QAbstractTableModel *sipCpp = reinterpret_cast< ::QAbstractTableModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractTableModel(sipSimpleWrapper *);}
static void dealloc_QAbstractTableModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractTableModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTableModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractTableModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTableModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractTableModel *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractTableModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTableModel[] = {{6, 255, 1}};


static PyMethodDef methods_QAbstractTableModel[] = {
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QAbstractTableModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QAbstractTableModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QAbstractTableModel_hasChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QAbstractTableModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractTableModel_index)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QAbstractTableModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_parent)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QAbstractTableModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_sibling)}
};

PyDoc_STRVAR(doc_QAbstractTableModel, "\1QAbstractTableModel(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QAbstractTableModel = {
    & ::QAbstractTableModel::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractTableModel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTableModel,
        {0},
        &plugin_QAbstractTableModel
    },
    {
        sipNameNr_QAbstractTableModel,
        {0, 0, 1},
        6, methods_QAbstractTableModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractTableModel,
    -1,
    -1,
    supers_QAbstractTableModel,
    0,
    init_type_QAbstractTableModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractTableModel,
    0,
    0,
    0,
    release_QAbstractTableModel,
    cast_QAbstractTableModel,
    0,
    0,
    0,
    0,
    0,
    0
};
