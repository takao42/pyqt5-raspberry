/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qundogroup.sip"
#include <qundogroup.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 56 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qundostack.sip"
#include <qundostack.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQUndoGroup.cpp"


class sipQUndoGroup : public  ::QUndoGroup
{
public:
    sipQUndoGroup( ::QObject*);
    virtual ~sipQUndoGroup();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQUndoGroup(const sipQUndoGroup &);
    sipQUndoGroup &operator = (const sipQUndoGroup &);

    char sipPyMethods[7];
};

sipQUndoGroup::sipQUndoGroup( ::QObject*a0):  ::QUndoGroup(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUndoGroup::~sipQUndoGroup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQUndoGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QUndoGroup);

    return  ::QUndoGroup::metaObject();
}

int sipQUndoGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QUndoGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QUndoGroup,_c,_id,_a);

    return _id;
}

void *sipQUndoGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QUndoGroup, _clname, &sipCpp) ? sipCpp :  ::QUndoGroup::qt_metacast(_clname));
}

bool sipQUndoGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QUndoGroup::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQUndoGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QUndoGroup::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQUndoGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QUndoGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QUndoGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QUndoGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoGroup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QUndoGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoGroup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QUndoGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QUndoGroup_addStack, "addStack(self, QUndoStack)");

extern "C" {static PyObject *meth_QUndoGroup_addStack(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_addStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QUndoStack* a0;
         ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QUndoGroup, &sipCpp, sipType_QUndoStack, &a0))
        {
            sipCpp->addStack(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_addStack, doc_QUndoGroup_addStack);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_removeStack, "removeStack(self, QUndoStack)");

extern "C" {static PyObject *meth_QUndoGroup_removeStack(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_removeStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QUndoStack* a0;
         ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QUndoGroup, &sipCpp, sipType_QUndoStack, &a0))
        {
            sipCpp->removeStack(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_removeStack, doc_QUndoGroup_removeStack);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_stacks, "stacks(self) -> object");

extern "C" {static PyObject *meth_QUndoGroup_stacks(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_stacks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
            QList< ::QUndoStack*>*sipRes;

            sipRes = new QList< ::QUndoStack*>(sipCpp->stacks());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QUndoStack,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_stacks, doc_QUndoGroup_stacks);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_activeStack, "activeStack(self) -> QUndoStack");

extern "C" {static PyObject *meth_QUndoGroup_activeStack(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_activeStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
             ::QUndoStack*sipRes;

            sipRes = sipCpp->activeStack();

            return sipConvertFromType(sipRes,sipType_QUndoStack,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_activeStack, doc_QUndoGroup_activeStack);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_createRedoAction, "createRedoAction(self, QObject, prefix: str = '') -> QAction");

extern "C" {static PyObject *meth_QUndoGroup_createRedoAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_createRedoAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QObject* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        sipWrapper *sipOwner = 0;
        const  ::QUndoGroup *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|J1", &sipSelf, sipType_QUndoGroup, &sipCpp, sipType_QObject, &a0, &sipOwner, sipType_QString,&a1, &a1State))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->createRedoAction(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QAction,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_createRedoAction, doc_QUndoGroup_createRedoAction);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_createUndoAction, "createUndoAction(self, QObject, prefix: str = '') -> QAction");

extern "C" {static PyObject *meth_QUndoGroup_createUndoAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_createUndoAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QObject* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        sipWrapper *sipOwner = 0;
        const  ::QUndoGroup *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|J1", &sipSelf, sipType_QUndoGroup, &sipCpp, sipType_QObject, &a0, &sipOwner, sipType_QString,&a1, &a1State))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->createUndoAction(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QAction,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_createUndoAction, doc_QUndoGroup_createUndoAction);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_canUndo, "canUndo(self) -> bool");

extern "C" {static PyObject *meth_QUndoGroup_canUndo(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_canUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canUndo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_canUndo, doc_QUndoGroup_canUndo);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_canRedo, "canRedo(self) -> bool");

extern "C" {static PyObject *meth_QUndoGroup_canRedo(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_canRedo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canRedo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_canRedo, doc_QUndoGroup_canRedo);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_undoText, "undoText(self) -> str");

extern "C" {static PyObject *meth_QUndoGroup_undoText(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_undoText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->undoText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_undoText, doc_QUndoGroup_undoText);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_redoText, "redoText(self) -> str");

extern "C" {static PyObject *meth_QUndoGroup_redoText(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_redoText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->redoText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_redoText, doc_QUndoGroup_redoText);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_isClean, "isClean(self) -> bool");

extern "C" {static PyObject *meth_QUndoGroup_isClean(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_isClean(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClean();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_isClean, doc_QUndoGroup_isClean);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_redo, "redo(self)");

extern "C" {static PyObject *meth_QUndoGroup_redo(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_redo, doc_QUndoGroup_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_setActiveStack, "setActiveStack(self, QUndoStack)");

extern "C" {static PyObject *meth_QUndoGroup_setActiveStack(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_setActiveStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QUndoStack* a0;
         ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QUndoGroup, &sipCpp, sipType_QUndoStack, &a0))
        {
            sipCpp->setActiveStack(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_setActiveStack, doc_QUndoGroup_setActiveStack);

    return NULL;
}


PyDoc_STRVAR(doc_QUndoGroup_undo, "undo(self)");

extern "C" {static PyObject *meth_QUndoGroup_undo(PyObject *, PyObject *);}
static PyObject *meth_QUndoGroup_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QUndoGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoGroup, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUndoGroup, sipName_undo, doc_QUndoGroup_undo);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QUndoGroup(void *, const sipTypeDef *);}
static void *cast_QUndoGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QUndoGroup *sipCpp = reinterpret_cast< ::QUndoGroup *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUndoGroup(void *, int);}
static void release_QUndoGroup(void *sipCppV, int)
{
     ::QUndoGroup *sipCpp = reinterpret_cast< ::QUndoGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QUndoGroup(sipSimpleWrapper *);}
static void dealloc_QUndoGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQUndoGroup *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUndoGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QUndoGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUndoGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQUndoGroup *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQUndoGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QUndoGroup[] = {{32, 0, 1}};


static PyMethodDef methods_QUndoGroup[] = {
    {SIP_MLNAME_CAST(sipName_activeStack), meth_QUndoGroup_activeStack, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_activeStack)},
    {SIP_MLNAME_CAST(sipName_addStack), meth_QUndoGroup_addStack, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_addStack)},
    {SIP_MLNAME_CAST(sipName_canRedo), meth_QUndoGroup_canRedo, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_canRedo)},
    {SIP_MLNAME_CAST(sipName_canUndo), meth_QUndoGroup_canUndo, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_canUndo)},
    {SIP_MLNAME_CAST(sipName_createRedoAction), (PyCFunction)meth_QUndoGroup_createRedoAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUndoGroup_createRedoAction)},
    {SIP_MLNAME_CAST(sipName_createUndoAction), (PyCFunction)meth_QUndoGroup_createUndoAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUndoGroup_createUndoAction)},
    {SIP_MLNAME_CAST(sipName_isClean), meth_QUndoGroup_isClean, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_isClean)},
    {SIP_MLNAME_CAST(sipName_redo), meth_QUndoGroup_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_redo)},
    {SIP_MLNAME_CAST(sipName_redoText), meth_QUndoGroup_redoText, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_redoText)},
    {SIP_MLNAME_CAST(sipName_removeStack), meth_QUndoGroup_removeStack, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_removeStack)},
    {SIP_MLNAME_CAST(sipName_setActiveStack), meth_QUndoGroup_setActiveStack, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_setActiveStack)},
    {SIP_MLNAME_CAST(sipName_stacks), meth_QUndoGroup_stacks, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_stacks)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QUndoGroup_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_undo)},
    {SIP_MLNAME_CAST(sipName_undoText), meth_QUndoGroup_undoText, METH_VARARGS, SIP_MLDOC_CAST(doc_QUndoGroup_undoText)}
};

PyDoc_STRVAR(doc_QUndoGroup, "\1QUndoGroup(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QUndoGroup[] = {
    {"undoTextChanged(QString)", "\1undoTextChanged(self, str)", 0, 0},
    {"redoTextChanged(QString)", "\1redoTextChanged(self, str)", 0, 0},
    {"indexChanged(int)", "\1indexChanged(self, int)", 0, 0},
    {"cleanChanged(bool)", "\1cleanChanged(self, bool)", 0, 0},
    {"canUndoChanged(bool)", "\1canUndoChanged(self, bool)", 0, 0},
    {"canRedoChanged(bool)", "\1canRedoChanged(self, bool)", 0, 0},
    {"activeStackChanged(QUndoStack*)", "\1activeStackChanged(self, QUndoStack)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QUndoGroup = {
    & ::QUndoGroup::staticMetaObject,
    0,
    signals_QUndoGroup,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QUndoGroup = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUndoGroup,
        {0},
        &plugin_QUndoGroup
    },
    {
        sipNameNr_QUndoGroup,
        {0, 0, 1},
        14, methods_QUndoGroup,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QUndoGroup,
    -1,
    -1,
    supers_QUndoGroup,
    0,
    init_type_QUndoGroup,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QUndoGroup,
    0,
    0,
    0,
    release_QUndoGroup,
    cast_QUndoGroup,
    0,
    0,
    0,
    0,
    0,
    0
};
