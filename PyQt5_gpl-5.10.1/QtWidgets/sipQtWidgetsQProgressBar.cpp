/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qprogressbar.sip"
#include <qprogressbar.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"

#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 454 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 87 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 90 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 93 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 96 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 99 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 102 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 105 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 108 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 111 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 114 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 117 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 120 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 580 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 663 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 174 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 177 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 180 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 183 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 186 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 192 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 195 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 198 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 201 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 204 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 207 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 210 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 213 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 216 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 219 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 222 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 225 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 228 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 231 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 234 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 237 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQProgressBar.cpp"


class sipQProgressBar : public  ::QProgressBar
{
public:
    sipQProgressBar( ::QWidget*);
    virtual ~sipQProgressBar();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString text() const;
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    bool hasHeightForWidth() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
     ::QPainter* sharedPainter() const;
    void initPainter( ::QPainter*) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProgressBar(const sipQProgressBar &);
    sipQProgressBar &operator = (const sipQProgressBar &);

    char sipPyMethods[47];
};

sipQProgressBar::sipQProgressBar( ::QWidget*a0):  ::QProgressBar(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProgressBar::~sipQProgressBar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQProgressBar::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QProgressBar);

    return  ::QProgressBar::metaObject();
}

int sipQProgressBar::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QProgressBar::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QProgressBar,_c,_id,_a);

    return _id;
}

void *sipQProgressBar::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QProgressBar, _clname, &sipCpp) ? sipCpp :  ::QProgressBar::qt_metacast(_clname));
}

 ::QString sipQProgressBar::text() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_text);

    if (!sipMeth)
        return  ::QProgressBar::text();

    extern  ::QString sipVH_QtWidgets_195(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_195(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQProgressBar::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QProgressBar::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QProgressBar::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QProgressBar::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QProgressBar::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QProgressBar::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQProgressBar::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QProgressBar::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQProgressBar::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QProgressBar::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQProgressBar::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QProgressBar::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQProgressBar::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QProgressBar::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQProgressBar::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QProgressBar::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQProgressBar::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QProgressBar::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQProgressBar::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QProgressBar::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQProgressBar::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QProgressBar::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQProgressBar::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QProgressBar::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QProgressBar::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QProgressBar::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QProgressBar::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QProgressBar::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QProgressBar::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QProgressBar::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QProgressBar::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QProgressBar::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QProgressBar::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QProgressBar::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QProgressBar::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QProgressBar::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QProgressBar::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QProgressBar::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QProgressBar::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QProgressBar::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QProgressBar::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QProgressBar::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QProgressBar::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QProgressBar::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QProgressBar::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QProgressBar::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QProgressBar::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QProgressBar::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QProgressBar::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProgressBar::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QProgressBar::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQProgressBar::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QProgressBar::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQProgressBar::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QProgressBar::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQProgressBar::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QProgressBar::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQProgressBar::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QProgressBar::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQProgressBar::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QProgressBar::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQProgressBar::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QProgressBar::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QProgressBar_minimum, "minimum(self) -> int");

extern "C" {static PyObject *meth_QProgressBar_minimum(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_minimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_minimum, doc_QProgressBar_minimum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_maximum, "maximum(self) -> int");

extern "C" {static PyObject *meth_QProgressBar_maximum(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_maximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_maximum, doc_QProgressBar_maximum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setRange, "setRange(self, int, int)");

extern "C" {static PyObject *meth_QProgressBar_setRange(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QProgressBar, &sipCpp, &a0, &a1))
        {
            sipCpp->setRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setRange, doc_QProgressBar_setRange);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_value, "value(self) -> int");

extern "C" {static PyObject *meth_QProgressBar_value(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->value();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_value, doc_QProgressBar_value);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_text, "text(self) -> str");

extern "C" {static PyObject *meth_QProgressBar_text(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QProgressBar::text() : sipCpp->text()));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_text, doc_QProgressBar_text);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setTextVisible, "setTextVisible(self, bool)");

extern "C" {static PyObject *meth_QProgressBar_setTextVisible(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setTextVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QProgressBar, &sipCpp, &a0))
        {
            sipCpp->setTextVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setTextVisible, doc_QProgressBar_setTextVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_isTextVisible, "isTextVisible(self) -> bool");

extern "C" {static PyObject *meth_QProgressBar_isTextVisible(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_isTextVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTextVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_isTextVisible, doc_QProgressBar_isTextVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QProgressBar_alignment(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_alignment, doc_QProgressBar_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QProgressBar_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProgressBar, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setAlignment, doc_QProgressBar_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QProgressBar_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QProgressBar::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_sizeHint, doc_QProgressBar_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QProgressBar_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QProgressBar::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_minimumSizeHint, doc_QProgressBar_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_orientation, "orientation(self) -> Qt.Orientation");

extern "C" {static PyObject *meth_QProgressBar_orientation(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
             ::Qt::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_orientation, doc_QProgressBar_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setInvertedAppearance, "setInvertedAppearance(self, bool)");

extern "C" {static PyObject *meth_QProgressBar_setInvertedAppearance(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setInvertedAppearance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QProgressBar, &sipCpp, &a0))
        {
            sipCpp->setInvertedAppearance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setInvertedAppearance, doc_QProgressBar_setInvertedAppearance);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setTextDirection, "setTextDirection(self, QProgressBar.Direction)");

extern "C" {static PyObject *meth_QProgressBar_setTextDirection(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setTextDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QProgressBar::Direction a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProgressBar, &sipCpp, sipType_QProgressBar_Direction, &a0))
        {
            sipCpp->setTextDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setTextDirection, doc_QProgressBar_setTextDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setFormat, "setFormat(self, str)");

extern "C" {static PyObject *meth_QProgressBar_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProgressBar, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setFormat, doc_QProgressBar_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_format, "format(self) -> str");

extern "C" {static PyObject *meth_QProgressBar_format(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_format, doc_QProgressBar_format);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_resetFormat, "resetFormat(self)");

extern "C" {static PyObject *meth_QProgressBar_resetFormat(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_resetFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
            sipCpp->resetFormat();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_resetFormat, doc_QProgressBar_resetFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_reset, "reset(self)");

extern "C" {static PyObject *meth_QProgressBar_reset(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProgressBar, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_reset, doc_QProgressBar_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setMinimum, "setMinimum(self, int)");

extern "C" {static PyObject *meth_QProgressBar_setMinimum(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QProgressBar, &sipCpp, &a0))
        {
            sipCpp->setMinimum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setMinimum, doc_QProgressBar_setMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setMaximum, "setMaximum(self, int)");

extern "C" {static PyObject *meth_QProgressBar_setMaximum(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QProgressBar, &sipCpp, &a0))
        {
            sipCpp->setMaximum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setMaximum, doc_QProgressBar_setMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setValue, "setValue(self, int)");

extern "C" {static PyObject *meth_QProgressBar_setValue(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QProgressBar, &sipCpp, &a0))
        {
            sipCpp->setValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setValue, doc_QProgressBar_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_setOrientation, "setOrientation(self, Qt.Orientation)");

extern "C" {static PyObject *meth_QProgressBar_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProgressBar, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            sipCpp->setOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_setOrientation, doc_QProgressBar_setOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_initStyleOption, "initStyleOption(self, QStyleOptionProgressBar)");

extern "C" {static PyObject *meth_QProgressBar_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyleOptionProgressBar* a0;
        const  ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProgressBar, &sipCpp, sipType_QStyleOptionProgressBar, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_initStyleOption, doc_QProgressBar_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QProgressBar_event(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProgressBar, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProgressBar::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_event, doc_QProgressBar_event);

    return NULL;
}


PyDoc_STRVAR(doc_QProgressBar_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QProgressBar_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QProgressBar_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QProgressBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProgressBar, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QProgressBar::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProgressBar, sipName_paintEvent, doc_QProgressBar_paintEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QProgressBar(void *, const sipTypeDef *);}
static void *cast_QProgressBar(void *sipCppV, const sipTypeDef *targetType)
{
     ::QProgressBar *sipCpp = reinterpret_cast< ::QProgressBar *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProgressBar(void *, int);}
static void release_QProgressBar(void *sipCppV, int)
{
     ::QProgressBar *sipCpp = reinterpret_cast< ::QProgressBar *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QProgressBar(sipSimpleWrapper *);}
static void dealloc_QProgressBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQProgressBar *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QProgressBar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QProgressBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProgressBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProgressBar *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQProgressBar(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProgressBar[] = {{456, 255, 1}};


static PyMethodDef methods_QProgressBar[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QProgressBar_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_alignment)},
    {SIP_MLNAME_CAST(sipName_event), meth_QProgressBar_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_event)},
    {SIP_MLNAME_CAST(sipName_format), meth_QProgressBar_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_format)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QProgressBar_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_isTextVisible), meth_QProgressBar_isTextVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_isTextVisible)},
    {SIP_MLNAME_CAST(sipName_maximum), meth_QProgressBar_maximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_maximum)},
    {SIP_MLNAME_CAST(sipName_minimum), meth_QProgressBar_minimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_minimum)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QProgressBar_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QProgressBar_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_orientation)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QProgressBar_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_paintEvent)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QProgressBar_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_reset)},
    {SIP_MLNAME_CAST(sipName_resetFormat), meth_QProgressBar_resetFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_resetFormat)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QProgressBar_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QProgressBar_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setFormat)},
    {SIP_MLNAME_CAST(sipName_setInvertedAppearance), meth_QProgressBar_setInvertedAppearance, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setInvertedAppearance)},
    {SIP_MLNAME_CAST(sipName_setMaximum), meth_QProgressBar_setMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setMaximum)},
    {SIP_MLNAME_CAST(sipName_setMinimum), meth_QProgressBar_setMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setMinimum)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QProgressBar_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setRange), meth_QProgressBar_setRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setRange)},
    {SIP_MLNAME_CAST(sipName_setTextDirection), meth_QProgressBar_setTextDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setTextDirection)},
    {SIP_MLNAME_CAST(sipName_setTextVisible), meth_QProgressBar_setTextVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setTextVisible)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QProgressBar_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_setValue)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QProgressBar_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_sizeHint)},
    {SIP_MLNAME_CAST(sipName_text), meth_QProgressBar_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_text)},
    {SIP_MLNAME_CAST(sipName_value), meth_QProgressBar_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QProgressBar_value)}
};

static sipEnumMemberDef enummembers_QProgressBar[] = {
    {sipName_BottomToTop, static_cast<int>( ::QProgressBar::BottomToTop), 250},
    {sipName_TopToBottom, static_cast<int>( ::QProgressBar::TopToBottom), 250},
};

PyDoc_STRVAR(doc_QProgressBar, "\1QProgressBar(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QProgressBar[] = {
    {"valueChanged(int)", "\1valueChanged(self, int)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QProgressBar = {
    & ::QProgressBar::staticMetaObject,
    0,
    signals_QProgressBar,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QProgressBar = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QProgressBar,
        {0},
        &plugin_QProgressBar
    },
    {
        sipNameNr_QProgressBar,
        {0, 0, 1},
        25, methods_QProgressBar,
        2, enummembers_QProgressBar,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QProgressBar,
    -1,
    -1,
    supers_QProgressBar,
    0,
    init_type_QProgressBar,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QProgressBar,
    0,
    0,
    0,
    release_QProgressBar,
    cast_QProgressBar,
    0,
    0,
    0,
    0,
    0,
    0
};
