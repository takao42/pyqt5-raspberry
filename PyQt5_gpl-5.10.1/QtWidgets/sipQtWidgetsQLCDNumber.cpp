/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qlcdnumber.sip"
#include <qlcdnumber.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"

#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 208 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 87 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 90 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 93 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 96 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 99 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 102 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 105 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 108 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 111 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 114 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 117 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 120 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 580 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 663 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 174 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 177 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 180 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 183 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 186 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 192 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 195 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 198 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 201 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 204 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 207 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 210 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 213 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 216 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 219 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 222 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 225 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 228 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 231 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 234 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 237 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"


class sipQLCDNumber : public  ::QLCDNumber
{
public:
    sipQLCDNumber( ::QWidget*);
    sipQLCDNumber( ::uint, ::QWidget*);
    virtual ~sipQLCDNumber();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void initPainter( ::QPainter*) const;
     ::QPainter* sharedPainter() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLCDNumber(const sipQLCDNumber &);
    sipQLCDNumber &operator = (const sipQLCDNumber &);

    char sipPyMethods[46];
};

sipQLCDNumber::sipQLCDNumber( ::QWidget*a0):  ::QLCDNumber(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLCDNumber::sipQLCDNumber( ::uint a0, ::QWidget*a1):  ::QLCDNumber(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLCDNumber::~sipQLCDNumber()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLCDNumber::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QLCDNumber);

    return  ::QLCDNumber::metaObject();
}

int sipQLCDNumber::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLCDNumber::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QLCDNumber,_c,_id,_a);

    return _id;
}

void *sipQLCDNumber::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QLCDNumber, _clname, &sipCpp) ? sipCpp :  ::QLCDNumber::qt_metacast(_clname));
}

void sipQLCDNumber::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QLCDNumber::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQLCDNumber::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QLCDNumber::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLCDNumber::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QLCDNumber::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQLCDNumber::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QLCDNumber::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLCDNumber::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QLCDNumber::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQLCDNumber::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QLCDNumber::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQLCDNumber::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QLCDNumber::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQLCDNumber::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QLCDNumber::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQLCDNumber::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QLCDNumber::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQLCDNumber::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QLCDNumber::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQLCDNumber::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QLCDNumber::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQLCDNumber::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QLCDNumber::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQLCDNumber::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QLCDNumber::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLCDNumber::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QLCDNumber::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLCDNumber::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QLCDNumber::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQLCDNumber::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QLCDNumber::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QLCDNumber::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLCDNumber::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QLCDNumber::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLCDNumber_smallDecimalPoint, "smallDecimalPoint(self) -> bool");

extern "C" {static PyObject *meth_QLCDNumber_smallDecimalPoint(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_smallDecimalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->smallDecimalPoint();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_smallDecimalPoint, doc_QLCDNumber_smallDecimalPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_digitCount, "digitCount(self) -> int");

extern "C" {static PyObject *meth_QLCDNumber_digitCount(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_digitCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->digitCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_digitCount, doc_QLCDNumber_digitCount);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setDigitCount, "setDigitCount(self, int)");

extern "C" {static PyObject *meth_QLCDNumber_setDigitCount(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setDigitCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLCDNumber, &sipCpp, &a0))
        {
            sipCpp->setDigitCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setDigitCount, doc_QLCDNumber_setDigitCount);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setNumDigits, "setNumDigits(self, int)");

extern "C" {static PyObject *meth_QLCDNumber_setNumDigits(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setNumDigits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLCDNumber, &sipCpp, &a0))
        {
#line 54 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qlcdnumber.sip"
        // This is implemented for Qt v5 so that .ui files created with Designer for Qt v4 will continue to work.
        sipCpp->setDigitCount(a0);
#line 1244 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLCDNumber.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setNumDigits, doc_QLCDNumber_setNumDigits);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_checkOverflow, "checkOverflow(self, float) -> bool\n"
"checkOverflow(self, int) -> bool");

extern "C" {static PyObject *meth_QLCDNumber_checkOverflow(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_checkOverflow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXd", &sipSelf, sipType_QLCDNumber, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->checkOverflow(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLCDNumber, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->checkOverflow(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_checkOverflow, doc_QLCDNumber_checkOverflow);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_mode, "mode(self) -> QLCDNumber.Mode");

extern "C" {static PyObject *meth_QLCDNumber_mode(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_mode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
             ::QLCDNumber::Mode sipRes;

            sipRes = sipCpp->mode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLCDNumber_Mode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_mode, doc_QLCDNumber_mode);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setMode, "setMode(self, QLCDNumber.Mode)");

extern "C" {static PyObject *meth_QLCDNumber_setMode(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLCDNumber::Mode a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLCDNumber, &sipCpp, sipType_QLCDNumber_Mode, &a0))
        {
            sipCpp->setMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setMode, doc_QLCDNumber_setMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_segmentStyle, "segmentStyle(self) -> QLCDNumber.SegmentStyle");

extern "C" {static PyObject *meth_QLCDNumber_segmentStyle(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_segmentStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
             ::QLCDNumber::SegmentStyle sipRes;

            sipRes = sipCpp->segmentStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLCDNumber_SegmentStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_segmentStyle, doc_QLCDNumber_segmentStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setSegmentStyle, "setSegmentStyle(self, QLCDNumber.SegmentStyle)");

extern "C" {static PyObject *meth_QLCDNumber_setSegmentStyle(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setSegmentStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLCDNumber::SegmentStyle a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLCDNumber, &sipCpp, sipType_QLCDNumber_SegmentStyle, &a0))
        {
            sipCpp->setSegmentStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setSegmentStyle, doc_QLCDNumber_setSegmentStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_value, "value(self) -> float");

extern "C" {static PyObject *meth_QLCDNumber_value(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->value();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_value, doc_QLCDNumber_value);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_intValue, "intValue(self) -> int");

extern "C" {static PyObject *meth_QLCDNumber_intValue(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_intValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->intValue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_intValue, doc_QLCDNumber_intValue);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLCDNumber_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLCDNumber::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_sizeHint, doc_QLCDNumber_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_display, "display(self, str)\n"
"display(self, float)\n"
"display(self, int)");

extern "C" {static PyObject *meth_QLCDNumber_display(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_display(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLCDNumber, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->display(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        double a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXd", &sipSelf, sipType_QLCDNumber, &sipCpp, &a0))
        {
            sipCpp->display(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLCDNumber, &sipCpp, &a0))
        {
            sipCpp->display(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_display, doc_QLCDNumber_display);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setHexMode, "setHexMode(self)");

extern "C" {static PyObject *meth_QLCDNumber_setHexMode(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setHexMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            sipCpp->setHexMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setHexMode, doc_QLCDNumber_setHexMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setDecMode, "setDecMode(self)");

extern "C" {static PyObject *meth_QLCDNumber_setDecMode(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setDecMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            sipCpp->setDecMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setDecMode, doc_QLCDNumber_setDecMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setOctMode, "setOctMode(self)");

extern "C" {static PyObject *meth_QLCDNumber_setOctMode(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setOctMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            sipCpp->setOctMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setOctMode, doc_QLCDNumber_setOctMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setBinMode, "setBinMode(self)");

extern "C" {static PyObject *meth_QLCDNumber_setBinMode(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setBinMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLCDNumber, &sipCpp))
        {
            sipCpp->setBinMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setBinMode, doc_QLCDNumber_setBinMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_setSmallDecimalPoint, "setSmallDecimalPoint(self, bool)");

extern "C" {static PyObject *meth_QLCDNumber_setSmallDecimalPoint(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_setSmallDecimalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLCDNumber, &sipCpp, &a0))
        {
            sipCpp->setSmallDecimalPoint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_setSmallDecimalPoint, doc_QLCDNumber_setSmallDecimalPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QLCDNumber_event(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLCDNumber, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLCDNumber::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_event, doc_QLCDNumber_event);

    return NULL;
}


PyDoc_STRVAR(doc_QLCDNumber_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QLCDNumber_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QLCDNumber_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QLCDNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLCDNumber, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLCDNumber::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLCDNumber, sipName_paintEvent, doc_QLCDNumber_paintEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLCDNumber(void *, const sipTypeDef *);}
static void *cast_QLCDNumber(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLCDNumber *sipCpp = reinterpret_cast< ::QLCDNumber *>(sipCppV);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLCDNumber(void *, int);}
static void release_QLCDNumber(void *sipCppV, int)
{
     ::QLCDNumber *sipCpp = reinterpret_cast< ::QLCDNumber *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLCDNumber(sipSimpleWrapper *);}
static void dealloc_QLCDNumber(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLCDNumber *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLCDNumber(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLCDNumber(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLCDNumber(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLCDNumber *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQLCDNumber(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::uint a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "u|JH", &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQLCDNumber(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLCDNumber[] = {{98, 255, 1}};


static PyMethodDef methods_QLCDNumber[] = {
    {SIP_MLNAME_CAST(sipName_checkOverflow), meth_QLCDNumber_checkOverflow, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_checkOverflow)},
    {SIP_MLNAME_CAST(sipName_digitCount), meth_QLCDNumber_digitCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_digitCount)},
    {SIP_MLNAME_CAST(sipName_display), meth_QLCDNumber_display, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_display)},
    {SIP_MLNAME_CAST(sipName_event), meth_QLCDNumber_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_event)},
    {SIP_MLNAME_CAST(sipName_intValue), meth_QLCDNumber_intValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_intValue)},
    {SIP_MLNAME_CAST(sipName_mode), meth_QLCDNumber_mode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_mode)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QLCDNumber_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_paintEvent)},
    {SIP_MLNAME_CAST(sipName_segmentStyle), meth_QLCDNumber_segmentStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_segmentStyle)},
    {SIP_MLNAME_CAST(sipName_setBinMode), meth_QLCDNumber_setBinMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setBinMode)},
    {SIP_MLNAME_CAST(sipName_setDecMode), meth_QLCDNumber_setDecMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setDecMode)},
    {SIP_MLNAME_CAST(sipName_setDigitCount), meth_QLCDNumber_setDigitCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setDigitCount)},
    {SIP_MLNAME_CAST(sipName_setHexMode), meth_QLCDNumber_setHexMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setHexMode)},
    {SIP_MLNAME_CAST(sipName_setMode), meth_QLCDNumber_setMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setMode)},
    {SIP_MLNAME_CAST(sipName_setNumDigits), meth_QLCDNumber_setNumDigits, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setNumDigits)},
    {SIP_MLNAME_CAST(sipName_setOctMode), meth_QLCDNumber_setOctMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setOctMode)},
    {SIP_MLNAME_CAST(sipName_setSegmentStyle), meth_QLCDNumber_setSegmentStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setSegmentStyle)},
    {SIP_MLNAME_CAST(sipName_setSmallDecimalPoint), meth_QLCDNumber_setSmallDecimalPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_setSmallDecimalPoint)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QLCDNumber_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_sizeHint)},
    {SIP_MLNAME_CAST(sipName_smallDecimalPoint), meth_QLCDNumber_smallDecimalPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_smallDecimalPoint)},
    {SIP_MLNAME_CAST(sipName_value), meth_QLCDNumber_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QLCDNumber_value)}
};

static sipEnumMemberDef enummembers_QLCDNumber[] = {
    {sipName_Bin, static_cast<int>( ::QLCDNumber::Bin), 183},
    {sipName_Dec, static_cast<int>( ::QLCDNumber::Dec), 183},
    {sipName_Filled, static_cast<int>( ::QLCDNumber::Filled), 184},
    {sipName_Flat, static_cast<int>( ::QLCDNumber::Flat), 184},
    {sipName_Hex, static_cast<int>( ::QLCDNumber::Hex), 183},
    {sipName_Oct, static_cast<int>( ::QLCDNumber::Oct), 183},
    {sipName_Outline, static_cast<int>( ::QLCDNumber::Outline), 184},
};

PyDoc_STRVAR(doc_QLCDNumber, "\1QLCDNumber(parent: QWidget = None)\n"
"QLCDNumber(int, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLCDNumber[] = {
    {"overflow()", "\1overflow(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QLCDNumber = {
    & ::QLCDNumber::staticMetaObject,
    0,
    signals_QLCDNumber,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QLCDNumber = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLCDNumber,
        {0},
        &plugin_QLCDNumber
    },
    {
        sipNameNr_QLCDNumber,
        {0, 0, 1},
        20, methods_QLCDNumber,
        7, enummembers_QLCDNumber,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLCDNumber,
    -1,
    -1,
    supers_QLCDNumber,
    0,
    init_type_QLCDNumber,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLCDNumber,
    0,
    0,
    0,
    release_QLCDNumber,
    cast_QLCDNumber,
    0,
    0,
    0,
    0,
    0,
    0
};
