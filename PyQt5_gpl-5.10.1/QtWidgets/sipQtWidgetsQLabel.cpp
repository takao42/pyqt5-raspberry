/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qlabel.sip"
#include <qlabel.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"

#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qmovie.sip"
#include <qmovie.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 208 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 87 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 90 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 93 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 96 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 99 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 105 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 108 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 111 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 114 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 117 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 120 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 123 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 126 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 129 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 132 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 144 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 580 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 663 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 189 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 192 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 195 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 198 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 201 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 204 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 207 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 210 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 213 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 216 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 219 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 228 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 231 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 234 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 237 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 240 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 243 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 246 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 249 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQLabel.cpp"


class sipQLabel : public  ::QLabel
{
public:
    sipQLabel( ::QWidget*, ::Qt::WindowFlags);
    sipQLabel(const  ::QString&, ::QWidget*, ::Qt::WindowFlags);
    virtual ~sipQLabel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void initPainter( ::QPainter*) const;
     ::QPainter* sharedPainter() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLabel(const sipQLabel &);
    sipQLabel &operator = (const sipQLabel &);

    char sipPyMethods[46];
};

sipQLabel::sipQLabel( ::QWidget*a0, ::Qt::WindowFlags a1):  ::QLabel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLabel::sipQLabel(const  ::QString& a0, ::QWidget*a1, ::Qt::WindowFlags a2):  ::QLabel(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLabel::~sipQLabel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLabel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QLabel);

    return  ::QLabel::metaObject();
}

int sipQLabel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLabel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QLabel,_c,_id,_a);

    return _id;
}

void *sipQLabel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QLabel, _clname, &sipCpp) ? sipCpp :  ::QLabel::qt_metacast(_clname));
}

void sipQLabel::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QLabel::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQLabel::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QLabel::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLabel::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QLabel::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQLabel::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QLabel::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLabel::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QLabel::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQLabel::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QLabel::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QLabel::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QLabel::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QLabel::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QLabel::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QLabel::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QLabel::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QLabel::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QLabel::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QLabel::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QLabel::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QLabel::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QLabel::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QLabel::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QLabel::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QLabel::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QLabel::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QLabel::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QLabel::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QLabel::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QLabel::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QLabel::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QLabel::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QLabel::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QLabel::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QLabel::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QLabel::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQLabel::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QLabel::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQLabel::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QLabel::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQLabel::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QLabel::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQLabel::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QLabel::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQLabel::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QLabel::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQLabel::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QLabel::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQLabel::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QLabel::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLabel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QLabel::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLabel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QLabel::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQLabel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QLabel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QLabel::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QLabel::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QLabel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLabel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QLabel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLabel_text, "text(self) -> str");

extern "C" {static PyObject *meth_QLabel_text(PyObject *, PyObject *);}
static PyObject *meth_QLabel_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_text, doc_QLabel_text);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_pixmap, "pixmap(self) -> QPixmap");

extern "C" {static PyObject *meth_QLabel_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            const  ::QPixmap*sipRes;

            sipRes = sipCpp->pixmap();

            return sipConvertFromType(const_cast< ::QPixmap *>(sipRes),sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_pixmap, doc_QLabel_pixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_picture, "picture(self) -> QPicture");

extern "C" {static PyObject *meth_QLabel_picture(PyObject *, PyObject *);}
static PyObject *meth_QLabel_picture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            const  ::QPicture*sipRes;

            sipRes = sipCpp->picture();

            return sipConvertFromType(const_cast< ::QPicture *>(sipRes),sipType_QPicture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_picture, doc_QLabel_picture);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_movie, "movie(self) -> QMovie");

extern "C" {static PyObject *meth_QLabel_movie(PyObject *, PyObject *);}
static PyObject *meth_QLabel_movie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::QMovie*sipRes;

            sipRes = sipCpp->movie();

            return sipConvertFromType(sipRes,sipType_QMovie,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_movie, doc_QLabel_movie);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_textFormat, "textFormat(self) -> Qt.TextFormat");

extern "C" {static PyObject *meth_QLabel_textFormat(PyObject *, PyObject *);}
static PyObject *meth_QLabel_textFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::Qt::TextFormat sipRes;

            sipRes = sipCpp->textFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_textFormat, doc_QLabel_textFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setTextFormat, "setTextFormat(self, Qt.TextFormat)");

extern "C" {static PyObject *meth_QLabel_setTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextFormat a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLabel, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            sipCpp->setTextFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setTextFormat, doc_QLabel_setTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QLabel_alignment(PyObject *, PyObject *);}
static PyObject *meth_QLabel_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_alignment, doc_QLabel_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QLabel_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLabel, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setAlignment, doc_QLabel_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setWordWrap, "setWordWrap(self, bool)");

extern "C" {static PyObject *meth_QLabel_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            sipCpp->setWordWrap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setWordWrap, doc_QLabel_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_wordWrap, "wordWrap(self) -> bool");

extern "C" {static PyObject *meth_QLabel_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wordWrap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_wordWrap, doc_QLabel_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_indent, "indent(self) -> int");

extern "C" {static PyObject *meth_QLabel_indent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_indent, doc_QLabel_indent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setIndent, "setIndent(self, int)");

extern "C" {static PyObject *meth_QLabel_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            sipCpp->setIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setIndent, doc_QLabel_setIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_margin, "margin(self) -> int");

extern "C" {static PyObject *meth_QLabel_margin(PyObject *, PyObject *);}
static PyObject *meth_QLabel_margin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->margin();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_margin, doc_QLabel_margin);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setMargin, "setMargin(self, int)");

extern "C" {static PyObject *meth_QLabel_setMargin(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            sipCpp->setMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setMargin, doc_QLabel_setMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_hasScaledContents, "hasScaledContents(self) -> bool");

extern "C" {static PyObject *meth_QLabel_hasScaledContents(PyObject *, PyObject *);}
static PyObject *meth_QLabel_hasScaledContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasScaledContents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_hasScaledContents, doc_QLabel_hasScaledContents);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setScaledContents, "setScaledContents(self, bool)");

extern "C" {static PyObject *meth_QLabel_setScaledContents(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setScaledContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            sipCpp->setScaledContents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setScaledContents, doc_QLabel_setScaledContents);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLabel_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLabel_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLabel::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_sizeHint, doc_QLabel_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLabel_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLabel_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLabel::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_minimumSizeHint, doc_QLabel_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setBuddy, "setBuddy(self, QWidget)");

extern "C" {static PyObject *meth_QLabel_setBuddy(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setBuddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        PyObject *a0Keep;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLabel, &sipCpp, &a0Keep, sipType_QWidget, &a0))
        {
            sipCpp->setBuddy(a0);

            sipKeepReference(sipSelf, -32, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setBuddy, doc_QLabel_setBuddy);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_buddy, "buddy(self) -> QWidget");

extern "C" {static PyObject *meth_QLabel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QLabel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->buddy();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_buddy, doc_QLabel_buddy);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QLabel_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QLabel_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLabel::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_heightForWidth, doc_QLabel_heightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_openExternalLinks, "openExternalLinks(self) -> bool");

extern "C" {static PyObject *meth_QLabel_openExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QLabel_openExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->openExternalLinks();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_openExternalLinks, doc_QLabel_openExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setTextInteractionFlags, "setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])");

extern "C" {static PyObject *meth_QLabel_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLabel, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            sipCpp->setTextInteractionFlags(*a0);
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setTextInteractionFlags, doc_QLabel_setTextInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_textInteractionFlags, "textInteractionFlags(self) -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QLabel_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QLabel_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags(sipCpp->textInteractionFlags());

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_textInteractionFlags, doc_QLabel_textInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setOpenExternalLinks, "setOpenExternalLinks(self, bool)");

extern "C" {static PyObject *meth_QLabel_setOpenExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setOpenExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            sipCpp->setOpenExternalLinks(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setOpenExternalLinks, doc_QLabel_setOpenExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_clear, "clear(self)");

extern "C" {static PyObject *meth_QLabel_clear(PyObject *, PyObject *);}
static PyObject *meth_QLabel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_clear, doc_QLabel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setMovie, "setMovie(self, QMovie)");

extern "C" {static PyObject *meth_QLabel_setMovie(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setMovie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMovie* a0;
        PyObject *a0Keep;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLabel, &sipCpp, &a0Keep, sipType_QMovie, &a0))
        {
            sipCpp->setMovie(a0);

            sipKeepReference(sipSelf, -33, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setMovie, doc_QLabel_setMovie);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setNum, "setNum(self, float)\n"
"setNum(self, int)");

extern "C" {static PyObject *meth_QLabel_setNum(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setNum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXd", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            sipCpp->setNum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            sipCpp->setNum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setNum, doc_QLabel_setNum);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setPicture, "setPicture(self, QPicture)");

extern "C" {static PyObject *meth_QLabel_setPicture(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setPicture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPicture* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLabel, &sipCpp, sipType_QPicture, &a0))
        {
            sipCpp->setPicture(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setPicture, doc_QLabel_setPicture);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setPixmap, "setPixmap(self, QPixmap)");

extern "C" {static PyObject *meth_QLabel_setPixmap(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPixmap* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLabel, &sipCpp, sipType_QPixmap, &a0))
        {
            sipCpp->setPixmap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setPixmap, doc_QLabel_setPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QLabel_setText(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLabel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setText, doc_QLabel_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QLabel_event(PyObject *, PyObject *);}
static PyObject *meth_QLabel_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLabel::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_event, doc_QLabel_event);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QLabel_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_paintEvent, doc_QLabel_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLabel_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_changeEvent, doc_QLabel_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QLabel_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_keyPressEvent, doc_QLabel_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLabel_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_mousePressEvent, doc_QLabel_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLabel_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_mouseMoveEvent, doc_QLabel_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLabel_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_mouseReleaseEvent, doc_QLabel_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QLabel_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_contextMenuEvent, doc_QLabel_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLabel_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_focusInEvent, doc_QLabel_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLabel_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QLabel_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLabel, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLabel::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_focusOutEvent, doc_QLabel_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QLabel_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QLabel_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QLabel, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLabel::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_focusNextPrevChild, doc_QLabel_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_setSelection, "setSelection(self, int, int)");

extern "C" {static PyObject *meth_QLabel_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QLabel_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLabel, &sipCpp, &a0, &a1))
        {
            sipCpp->setSelection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_setSelection, doc_QLabel_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_hasSelectedText, "hasSelectedText(self) -> bool");

extern "C" {static PyObject *meth_QLabel_hasSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QLabel_hasSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelectedText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_hasSelectedText, doc_QLabel_hasSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QLabel_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QLabel_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_selectedText, doc_QLabel_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLabel_selectionStart, "selectionStart(self) -> int");

extern "C" {static PyObject *meth_QLabel_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QLabel_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLabel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionStart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLabel, sipName_selectionStart, doc_QLabel_selectionStart);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLabel(void *, const sipTypeDef *);}
static void *cast_QLabel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLabel *sipCpp = reinterpret_cast< ::QLabel *>(sipCppV);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLabel(void *, int);}
static void release_QLabel(void *sipCppV, int)
{
     ::QLabel *sipCpp = reinterpret_cast< ::QLabel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLabel(sipSimpleWrapper *);}
static void dealloc_QLabel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLabel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLabel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLabel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLabel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLabel *sipCpp = 0;

    {
         ::QWidget* a0 = 0;
         ::Qt::WindowFlags a1def = Qt::WindowFlags();
         ::Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp = new sipQLabel(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;
         ::Qt::WindowFlags a2def = Qt::WindowFlags();
         ::Qt::WindowFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JHJ1", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner, sipType_Qt_WindowFlags, &a2, &a2State))
        {
            sipCpp = new sipQLabel(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_Qt_WindowFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLabel[] = {{98, 255, 1}};


static PyMethodDef methods_QLabel[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QLabel_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_alignment)},
    {SIP_MLNAME_CAST(sipName_buddy), meth_QLabel_buddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_buddy)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QLabel_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QLabel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_clear)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QLabel_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QLabel_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QLabel_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QLabel_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QLabel_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_hasScaledContents), meth_QLabel_hasScaledContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_hasScaledContents)},
    {SIP_MLNAME_CAST(sipName_hasSelectedText), meth_QLabel_hasSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_hasSelectedText)},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QLabel_heightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_heightForWidth)},
    {SIP_MLNAME_CAST(sipName_indent), meth_QLabel_indent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_indent)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QLabel_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_margin), meth_QLabel_margin, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_margin)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QLabel_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QLabel_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QLabel_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QLabel_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_movie), meth_QLabel_movie, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_movie)},
    {SIP_MLNAME_CAST(sipName_openExternalLinks), meth_QLabel_openExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_openExternalLinks)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QLabel_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_paintEvent)},
    {SIP_MLNAME_CAST(sipName_picture), meth_QLabel_picture, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_picture)},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QLabel_pixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_pixmap)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QLabel_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_selectedText)},
    {SIP_MLNAME_CAST(sipName_selectionStart), meth_QLabel_selectionStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_selectionStart)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QLabel_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setBuddy), meth_QLabel_setBuddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setBuddy)},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QLabel_setIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setIndent)},
    {SIP_MLNAME_CAST(sipName_setMargin), meth_QLabel_setMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setMargin)},
    {SIP_MLNAME_CAST(sipName_setMovie), meth_QLabel_setMovie, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setMovie)},
    {SIP_MLNAME_CAST(sipName_setNum), meth_QLabel_setNum, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setNum)},
    {SIP_MLNAME_CAST(sipName_setOpenExternalLinks), meth_QLabel_setOpenExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setOpenExternalLinks)},
    {SIP_MLNAME_CAST(sipName_setPicture), meth_QLabel_setPicture, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setPicture)},
    {SIP_MLNAME_CAST(sipName_setPixmap), meth_QLabel_setPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setPixmap)},
    {SIP_MLNAME_CAST(sipName_setScaledContents), meth_QLabel_setScaledContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setScaledContents)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QLabel_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setSelection)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QLabel_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setText)},
    {SIP_MLNAME_CAST(sipName_setTextFormat), meth_QLabel_setTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setTextFormat)},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QLabel_setTextInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setTextInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QLabel_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QLabel_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_sizeHint)},
    {SIP_MLNAME_CAST(sipName_text), meth_QLabel_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_text)},
    {SIP_MLNAME_CAST(sipName_textFormat), meth_QLabel_textFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_textFormat)},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QLabel_textInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_textInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QLabel_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLabel_wordWrap)}
};

PyDoc_STRVAR(doc_QLabel, "\1QLabel(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())\n"
"QLabel(str, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLabel[] = {
    {"linkHovered(QString)", "\1linkHovered(self, str)", 0, 0},
    {"linkActivated(QString)", "\1linkActivated(self, str)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QLabel = {
    & ::QLabel::staticMetaObject,
    0,
    signals_QLabel,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QLabel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLabel,
        {0},
        &plugin_QLabel
    },
    {
        sipNameNr_QLabel,
        {0, 0, 1},
        46, methods_QLabel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLabel,
    -1,
    -1,
    supers_QLabel,
    0,
    init_type_QLabel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLabel,
    0,
    0,
    0,
    release_QLabel,
    cast_QLabel,
    0,
    0,
    0,
    0,
    0,
    0
};
