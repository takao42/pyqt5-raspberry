/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qrubberband.sip"
#include <qrubberband.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"

#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 670 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 87 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 96 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 99 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 102 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 105 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 108 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 111 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 28 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 114 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 117 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 120 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 123 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 126 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 580 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 663 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 171 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 174 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 177 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 180 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 183 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 189 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 192 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 195 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 198 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 201 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 204 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 207 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 210 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 213 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 216 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 219 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 222 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 225 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 228 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 231 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQRubberBand.cpp"


class sipQRubberBand : public  ::QRubberBand
{
public:
    sipQRubberBand( ::QRubberBand::Shape, ::QWidget*);
    virtual ~sipQRubberBand();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    bool hasHeightForWidth() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
     ::QPainter* sharedPainter() const;
    void initPainter( ::QPainter*) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRubberBand(const sipQRubberBand &);
    sipQRubberBand &operator = (const sipQRubberBand &);

    char sipPyMethods[46];
};

sipQRubberBand::sipQRubberBand( ::QRubberBand::Shape a0, ::QWidget*a1):  ::QRubberBand(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRubberBand::~sipQRubberBand()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQRubberBand::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QRubberBand);

    return  ::QRubberBand::metaObject();
}

int sipQRubberBand::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QRubberBand::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QRubberBand,_c,_id,_a);

    return _id;
}

void *sipQRubberBand::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QRubberBand, _clname, &sipCpp) ? sipCpp :  ::QRubberBand::qt_metacast(_clname));
}

void sipQRubberBand::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QRubberBand::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QRubberBand::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QRubberBand::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QRubberBand::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QRubberBand::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQRubberBand::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QRubberBand::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQRubberBand::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QRubberBand::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQRubberBand::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QRubberBand::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQRubberBand::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QRubberBand::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQRubberBand::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QRubberBand::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQRubberBand::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QRubberBand::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQRubberBand::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QRubberBand::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQRubberBand::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QRubberBand::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQRubberBand::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QRubberBand::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QRubberBand::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QRubberBand::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QRubberBand::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QRubberBand::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QRubberBand::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QRubberBand::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QRubberBand::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QRubberBand::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QRubberBand::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QRubberBand::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QRubberBand::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QRubberBand::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QRubberBand::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QRubberBand::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QRubberBand::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QRubberBand::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QRubberBand::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QRubberBand::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QRubberBand::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QRubberBand::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QRubberBand::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QRubberBand::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QRubberBand::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QRubberBand::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QRubberBand::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRubberBand::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QRubberBand::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQRubberBand::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QRubberBand::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQRubberBand::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QRubberBand::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQRubberBand::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QRubberBand::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQRubberBand::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QRubberBand::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQRubberBand::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QRubberBand::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQRubberBand::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QRubberBand::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QRubberBand_shape, "shape(self) -> QRubberBand.Shape");

extern "C" {static PyObject *meth_QRubberBand_shape(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_shape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRubberBand, &sipCpp))
        {
             ::QRubberBand::Shape sipRes;

            sipRes = sipCpp->shape();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QRubberBand_Shape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_shape, doc_QRubberBand_shape);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_setGeometry, "setGeometry(self, QRect)\n"
"setGeometry(self, int, int, int, int)");

extern "C" {static PyObject *meth_QRubberBand_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setGeometry(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRubberBand, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setGeometry(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_setGeometry, doc_QRubberBand_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_move, "move(self, QPoint)\n"
"move(self, int, int)");

extern "C" {static PyObject *meth_QRubberBand_move(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_move(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->move(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRubberBand, &sipCpp, &a0, &a1))
        {
            sipCpp->move(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_move, doc_QRubberBand_move);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_resize, "resize(self, int, int)\n"
"resize(self, QSize)");

extern "C" {static PyObject *meth_QRubberBand_resize(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRubberBand, &sipCpp, &a0, &a1))
        {
            sipCpp->resize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QSize* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->resize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_resize, doc_QRubberBand_resize);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_initStyleOption, "initStyleOption(self, QStyleOptionRubberBand)");

extern "C" {static PyObject *meth_QRubberBand_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyleOptionRubberBand* a0;
        const  ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QStyleOptionRubberBand, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_initStyleOption, doc_QRubberBand_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QRubberBand_event(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QRubberBand::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_event, doc_QRubberBand_event);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QRubberBand_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QRubberBand::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_paintEvent, doc_QRubberBand_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QRubberBand_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QRubberBand::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_changeEvent, doc_QRubberBand_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QRubberBand_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QRubberBand::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_showEvent, doc_QRubberBand_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QRubberBand_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QRubberBand::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_resizeEvent, doc_QRubberBand_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QRubberBand_moveEvent, "moveEvent(self, QMoveEvent)");

extern "C" {static PyObject *meth_QRubberBand_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QRubberBand_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
         ::QRubberBand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRubberBand, &sipCpp, sipType_QMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QRubberBand::moveEvent(a0) : sipCpp->moveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRubberBand, sipName_moveEvent, doc_QRubberBand_moveEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QRubberBand(void *, const sipTypeDef *);}
static void *cast_QRubberBand(void *sipCppV, const sipTypeDef *targetType)
{
     ::QRubberBand *sipCpp = reinterpret_cast< ::QRubberBand *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRubberBand(void *, int);}
static void release_QRubberBand(void *sipCppV, int)
{
     ::QRubberBand *sipCpp = reinterpret_cast< ::QRubberBand *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QRubberBand(sipSimpleWrapper *);}
static void dealloc_QRubberBand(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQRubberBand *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRubberBand(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QRubberBand(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRubberBand(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRubberBand *sipCpp = 0;

    {
         ::QRubberBand::Shape a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QRubberBand_Shape, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQRubberBand(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRubberBand[] = {{456, 255, 1}};


static PyMethodDef methods_QRubberBand[] = {
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QRubberBand_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_changeEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QRubberBand_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_event)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QRubberBand_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_move), meth_QRubberBand_move, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_move)},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QRubberBand_moveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_moveEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QRubberBand_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_paintEvent)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QRubberBand_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_resize)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QRubberBand_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QRubberBand_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_setGeometry)},
    {SIP_MLNAME_CAST(sipName_shape), meth_QRubberBand_shape, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_shape)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QRubberBand_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRubberBand_showEvent)}
};

static sipEnumMemberDef enummembers_QRubberBand[] = {
    {sipName_Line, static_cast<int>( ::QRubberBand::Line), 256},
    {sipName_Rectangle, static_cast<int>( ::QRubberBand::Rectangle), 256},
};

PyDoc_STRVAR(doc_QRubberBand, "\1QRubberBand(QRubberBand.Shape, parent: QWidget = None)");


static pyqt5ClassPluginDef plugin_QRubberBand = {
    & ::QRubberBand::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QRubberBand = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRubberBand,
        {0},
        &plugin_QRubberBand
    },
    {
        sipNameNr_QRubberBand,
        {0, 0, 1},
        11, methods_QRubberBand,
        2, enummembers_QRubberBand,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QRubberBand,
    -1,
    -1,
    supers_QRubberBand,
    0,
    init_type_QRubberBand,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QRubberBand,
    0,
    0,
    0,
    release_QRubberBand,
    cast_QRubberBand,
    0,
    0,
    0,
    0,
    0,
    0
};
