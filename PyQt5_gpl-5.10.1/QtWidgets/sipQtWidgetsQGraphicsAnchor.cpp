/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicsanchorlayout.sip"
#include <qgraphicsanchorlayout.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"

#line 44 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qgraphicsanchorlayout.sip"
#include <qgraphicsanchorlayout.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQGraphicsAnchor.cpp"


PyDoc_STRVAR(doc_QGraphicsAnchor_setSpacing, "setSpacing(self, float)");

extern "C" {static PyObject *meth_QGraphicsAnchor_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchor_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QGraphicsAnchor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsAnchor, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchor, sipName_setSpacing, doc_QGraphicsAnchor_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchor_unsetSpacing, "unsetSpacing(self)");

extern "C" {static PyObject *meth_QGraphicsAnchor_unsetSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchor_unsetSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGraphicsAnchor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsAnchor, &sipCpp))
        {
            sipCpp->unsetSpacing();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchor, sipName_unsetSpacing, doc_QGraphicsAnchor_unsetSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchor_spacing, "spacing(self) -> float");

extern "C" {static PyObject *meth_QGraphicsAnchor_spacing(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchor_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsAnchor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsAnchor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->spacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchor, sipName_spacing, doc_QGraphicsAnchor_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchor_setSizePolicy, "setSizePolicy(self, QSizePolicy.Policy)");

extern "C" {static PyObject *meth_QGraphicsAnchor_setSizePolicy(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchor_setSizePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSizePolicy::Policy a0;
         ::QGraphicsAnchor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsAnchor, &sipCpp, sipType_QSizePolicy_Policy, &a0))
        {
            sipCpp->setSizePolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchor, sipName_setSizePolicy, doc_QGraphicsAnchor_setSizePolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsAnchor_sizePolicy, "sizePolicy(self) -> QSizePolicy.Policy");

extern "C" {static PyObject *meth_QGraphicsAnchor_sizePolicy(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsAnchor_sizePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsAnchor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsAnchor, &sipCpp))
        {
             ::QSizePolicy::Policy sipRes;

            sipRes = sipCpp->sizePolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSizePolicy_Policy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsAnchor, sipName_sizePolicy, doc_QGraphicsAnchor_sizePolicy);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGraphicsAnchor(void *, const sipTypeDef *);}
static void *cast_QGraphicsAnchor(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGraphicsAnchor *sipCpp = reinterpret_cast< ::QGraphicsAnchor *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsAnchor(void *, int);}
static void release_QGraphicsAnchor(void *sipCppV, int)
{
     ::QGraphicsAnchor *sipCpp = reinterpret_cast< ::QGraphicsAnchor *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGraphicsAnchor(sipSimpleWrapper *);}
static void dealloc_QGraphicsAnchor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGraphicsAnchor(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsAnchor[] = {{32, 0, 1}};


static PyMethodDef methods_QGraphicsAnchor[] = {
    {SIP_MLNAME_CAST(sipName_setSizePolicy), meth_QGraphicsAnchor_setSizePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchor_setSizePolicy)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QGraphicsAnchor_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchor_setSpacing)},
    {SIP_MLNAME_CAST(sipName_sizePolicy), meth_QGraphicsAnchor_sizePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchor_sizePolicy)},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QGraphicsAnchor_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchor_spacing)},
    {SIP_MLNAME_CAST(sipName_unsetSpacing), meth_QGraphicsAnchor_unsetSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsAnchor_unsetSpacing)}
};


static pyqt5ClassPluginDef plugin_QGraphicsAnchor = {
    & ::QGraphicsAnchor::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QGraphicsAnchor = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsAnchor,
        {0},
        &plugin_QGraphicsAnchor
    },
    {
        sipNameNr_QGraphicsAnchor,
        {0, 0, 1},
        5, methods_QGraphicsAnchor,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGraphicsAnchor,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsAnchor,
    0,
    0,
    0,
    release_QGraphicsAnchor,
    cast_QGraphicsAnchor,
    0,
    0,
    0,
    0,
    0,
    0
};
