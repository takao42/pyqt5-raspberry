/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pi/PyQt5_gpl-5.10.1/sip/QtWidgets/qkeyeventtransition.sip"
#include <qkeyeventtransition.h>
#line 29 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"

#line 26 "sip/QtCore/qstate.sip"
#include <qstate.h>
#line 33 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 45 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 51 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 54 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 60 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 63 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "/home/pi/PyQt5_gpl-5.10.1/QtWidgets/sipQtWidgetsQKeyEventTransition.cpp"


class sipQKeyEventTransition : public  ::QKeyEventTransition
{
public:
    sipQKeyEventTransition( ::QState*);
    sipQKeyEventTransition( ::QObject*, ::QEvent::Type,int, ::QState*);
    virtual ~sipQKeyEventTransition();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onTransition( ::QEvent*);
    bool eventTest( ::QEvent*);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQKeyEventTransition(const sipQKeyEventTransition &);
    sipQKeyEventTransition &operator = (const sipQKeyEventTransition &);

    char sipPyMethods[9];
};

sipQKeyEventTransition::sipQKeyEventTransition( ::QState*a0):  ::QKeyEventTransition(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQKeyEventTransition::sipQKeyEventTransition( ::QObject*a0, ::QEvent::Type a1,int a2, ::QState*a3):  ::QKeyEventTransition(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQKeyEventTransition::~sipQKeyEventTransition()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQKeyEventTransition::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QKeyEventTransition);

    return  ::QKeyEventTransition::metaObject();
}

int sipQKeyEventTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QKeyEventTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QKeyEventTransition,_c,_id,_a);

    return _id;
}

void *sipQKeyEventTransition::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QKeyEventTransition, _clname, &sipCpp) ? sipCpp :  ::QKeyEventTransition::qt_metacast(_clname));
}

void sipQKeyEventTransition::onTransition( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_onTransition);

    if (!sipMeth)
    {
         ::QKeyEventTransition::onTransition(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQKeyEventTransition::eventTest( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventTest);

    if (!sipMeth)
        return  ::QKeyEventTransition::eventTest(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQKeyEventTransition::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QKeyEventTransition::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQKeyEventTransition::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QKeyEventTransition::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQKeyEventTransition::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QKeyEventTransition::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQKeyEventTransition::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QKeyEventTransition::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQKeyEventTransition::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QKeyEventTransition::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQKeyEventTransition::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QKeyEventTransition::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQKeyEventTransition::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QKeyEventTransition::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QKeyEventTransition_key, "key(self) -> int");

extern "C" {static PyObject *meth_QKeyEventTransition_key(PyObject *, PyObject *);}
static PyObject *meth_QKeyEventTransition_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QKeyEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEventTransition, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->key();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEventTransition, sipName_key, doc_QKeyEventTransition_key);

    return NULL;
}


PyDoc_STRVAR(doc_QKeyEventTransition_setKey, "setKey(self, int)");

extern "C" {static PyObject *meth_QKeyEventTransition_setKey(PyObject *, PyObject *);}
static PyObject *meth_QKeyEventTransition_setKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QKeyEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QKeyEventTransition, &sipCpp, &a0))
        {
            sipCpp->setKey(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEventTransition, sipName_setKey, doc_QKeyEventTransition_setKey);

    return NULL;
}


PyDoc_STRVAR(doc_QKeyEventTransition_modifierMask, "modifierMask(self) -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QKeyEventTransition_modifierMask(PyObject *, PyObject *);}
static PyObject *meth_QKeyEventTransition_modifierMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QKeyEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEventTransition, &sipCpp))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers(sipCpp->modifierMask());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEventTransition, sipName_modifierMask, doc_QKeyEventTransition_modifierMask);

    return NULL;
}


PyDoc_STRVAR(doc_QKeyEventTransition_setModifierMask, "setModifierMask(self, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])");

extern "C" {static PyObject *meth_QKeyEventTransition_setModifierMask(PyObject *, PyObject *);}
static PyObject *meth_QKeyEventTransition_setModifierMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::KeyboardModifiers* a0;
        int a0State = 0;
         ::QKeyEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QKeyEventTransition, &sipCpp, sipType_Qt_KeyboardModifiers, &a0, &a0State))
        {
            sipCpp->setModifierMask(*a0);
            sipReleaseType(a0,sipType_Qt_KeyboardModifiers,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEventTransition, sipName_setModifierMask, doc_QKeyEventTransition_setModifierMask);

    return NULL;
}


PyDoc_STRVAR(doc_QKeyEventTransition_onTransition, "onTransition(self, QEvent)");

extern "C" {static PyObject *meth_QKeyEventTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QKeyEventTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QKeyEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QKeyEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QKeyEventTransition::onTransition(a0) : sipCpp->onTransition(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEventTransition, sipName_onTransition, doc_QKeyEventTransition_onTransition);

    return NULL;
}


PyDoc_STRVAR(doc_QKeyEventTransition_eventTest, "eventTest(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QKeyEventTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QKeyEventTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QKeyEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QKeyEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QKeyEventTransition::eventTest(a0) : sipCpp->eventTest(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEventTransition, sipName_eventTest, doc_QKeyEventTransition_eventTest);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QKeyEventTransition(void *, const sipTypeDef *);}
static void *cast_QKeyEventTransition(void *sipCppV, const sipTypeDef *targetType)
{
     ::QKeyEventTransition *sipCpp = reinterpret_cast< ::QKeyEventTransition *>(sipCppV);

    if (targetType == sipType_QEventTransition)
        return static_cast< ::QEventTransition *>(sipCpp);

    if (targetType == sipType_QAbstractTransition)
        return static_cast< ::QAbstractTransition *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QKeyEventTransition(void *, int);}
static void release_QKeyEventTransition(void *sipCppV, int)
{
     ::QKeyEventTransition *sipCpp = reinterpret_cast< ::QKeyEventTransition *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QKeyEventTransition(sipSimpleWrapper *);}
static void dealloc_QKeyEventTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQKeyEventTransition *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QKeyEventTransition(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QKeyEventTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QKeyEventTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQKeyEventTransition *sipCpp = 0;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQKeyEventTransition(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QEvent::Type a1;
        int a2;
         ::QState* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8Ei|JH", &a0Keep, sipType_QObject, &a0, sipType_QEvent_Type, &a1, &a2, sipType_QState, &a3, sipOwner))
        {
            sipCpp = new sipQKeyEventTransition(a0,a1,a2,a3);

            sipKeepReference((PyObject *)sipSelf, 10, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QKeyEventTransition[] = {{14, 0, 1}};


static PyMethodDef methods_QKeyEventTransition[] = {
    {SIP_MLNAME_CAST(sipName_eventTest), meth_QKeyEventTransition_eventTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEventTransition_eventTest)},
    {SIP_MLNAME_CAST(sipName_key), meth_QKeyEventTransition_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEventTransition_key)},
    {SIP_MLNAME_CAST(sipName_modifierMask), meth_QKeyEventTransition_modifierMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEventTransition_modifierMask)},
    {SIP_MLNAME_CAST(sipName_onTransition), meth_QKeyEventTransition_onTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEventTransition_onTransition)},
    {SIP_MLNAME_CAST(sipName_setKey), meth_QKeyEventTransition_setKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEventTransition_setKey)},
    {SIP_MLNAME_CAST(sipName_setModifierMask), meth_QKeyEventTransition_setModifierMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEventTransition_setModifierMask)}
};

PyDoc_STRVAR(doc_QKeyEventTransition, "\1QKeyEventTransition(sourceState: QState = None)\n"
"QKeyEventTransition(QObject, QEvent.Type, int, sourceState: QState = None)");


static pyqt5ClassPluginDef plugin_QKeyEventTransition = {
    & ::QKeyEventTransition::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QKeyEventTransition = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QKeyEventTransition,
        {0},
        &plugin_QKeyEventTransition
    },
    {
        sipNameNr_QKeyEventTransition,
        {0, 0, 1},
        6, methods_QKeyEventTransition,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QKeyEventTransition,
    -1,
    -1,
    supers_QKeyEventTransition,
    0,
    init_type_QKeyEventTransition,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QKeyEventTransition,
    0,
    0,
    0,
    release_QKeyEventTransition,
    cast_QKeyEventTransition,
    0,
    0,
    0,
    0,
    0,
    0
};
